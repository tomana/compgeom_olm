from dolfin import *
import numpy


#set_log_level(2);

Theta = pi/2
a, b = 0, 1.0
nr = 10  # divisions in r direction
nt = 50  # divisions in theta direction
mesh = RectangleMesh(a, 0, b, 1, nr, nt, 'crossed')


mesh = Mesh()
editor = MeshEditor()
editor.open(mesh, 2, 2)
num_cells_x = 30;
num_cells_y = 30;

editor.init_vertices(3*num_cells_x*num_cells_y) # test both versions of interface
editor.init_cells(num_cells_x*num_cells_y)    # test both versions of interface


switchx = False;
switchy = False;
for j in range(0,num_cells_y):
    switchy = not switchy;
    for i in range(0,num_cells_x):
# Add vertices
        switchx = not switchx;
        if(switchy): 
            switchx = not switchx
        spacer_x = 1.0/float(num_cells_x)
        spacer_y = 1.0/float(num_cells_y)
        if(switchx):
            if(i == 0):
                editor.add_vertex(j*num_cells_x*3 + i*3, (i+1)*spacer_x, j*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 1, (i+1)*spacer_x, (j+1)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 2, (i+2)*spacer_x, j*spacer_y)  
            elif(i == num_cells_x - 1):
                editor.add_vertex(j*num_cells_x*3 + i*3, i*spacer_x, j*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 1, (i+1)*spacer_x, (j+1)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 2, (i+1)*spacer_x, j*spacer_y) 
            else:
                editor.add_vertex(j*num_cells_x*3 + i*3, i*spacer_x, j*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 1, (i+1)*spacer_x, (j+1)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 2, (i+2)*spacer_x, j*spacer_y)            
        else:
            if(i == 0):
                editor.add_vertex(j*num_cells_x*3 + i*3, (i+1)*spacer_x, (j+1)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 1, (i+1)*spacer_x, (j)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 2, (i+2)*spacer_x, (j+1)*spacer_y)                
            elif(i == num_cells_x - 1):
                editor.add_vertex(j*num_cells_x*3 + i*3, (i)*spacer_x, (j+1)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 1, (i+1)*spacer_x, (j)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 2, (i+1)*spacer_x, (j+1)*spacer_y)
                print (i+1)*spacer_x
                print (j+1)*spacer_y
            else:
                editor.add_vertex(j*num_cells_x*3 + i*3, (i)*spacer_x, (j+1)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 1, (i+1)*spacer_x, (j)*spacer_y)
                editor.add_vertex(j*num_cells_x*3 + i*3 + 2, (i+2)*spacer_x, (j+1)*spacer_y)
        
        if(switchy):
            switchx = not switchx
# Add cell
        editor.add_cell(j*num_cells_x + i, j*num_cells_x*3 + i*3, j*num_cells_x*3 + i*3 + 1, j*num_cells_x*3 + i*3 + 2)

# Close editor
editor.close()

mesh.init()
mesh.order()
print mesh.ordered()

plot(mesh)

V = FunctionSpace(mesh, "Lagrange", 2)

spacer_x = 1.0/float(num_cells_x)
spacer_y = 1.0/float(num_cells_y)
        
# Define Dirichlet boundary (x = 0 or x = 1)
def boundary(x):
    return x[0] < DOLFIN_EPS + spacer_x or x[0] > 1.0 - spacer_x - DOLFIN_EPS or x[1] < DOLFIN_EPS + spacer_y or x[1] > 1.0 - DOLFIN_EPS - spacer_y

# Define boundary condition
u0 = Constant(0.0)
bc = DirichletBC(V, u0, boundary)

# Define variational problem
u = TrialFunction(V)
v = TestFunction(V)
f = Expression("10*exp(-(pow(x[0] - 0.5, 2) + pow(x[1] - 0.5, 2)) / 0.02)")
g = Expression("sin(5*x[0])")
a = inner(grad(u), grad(v))*dx
L = f*v*dx + g*v*ds

# Compute solution
u = Function(V)
solve(a == L, u, bc)

# Save solution in VTK format
file = File("poisson.pvd")
file << u

# Plot solution
plot(u)

interactive()
